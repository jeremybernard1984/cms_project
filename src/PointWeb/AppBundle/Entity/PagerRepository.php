<?php

namespace PointWeb\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PagerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PagerRepository extends EntityRepository
{
    public function pager($orderBy = 'id', $page = 1, $maxPerPage = 10)
    {
        $q = $this->createQueryBuilder('a');
        $q->add('select', 'a');
        $q->addOrderBy('a.' . $orderBy, 'ASC');
        $q->setFirstResult(($page - 1) * $maxPerPage)
            ->setMaxResults($maxPerPage);
        return new Paginator($q);
    }
       // pager qui passe en parametre l'id d'une catÃ©gorie
    public function pagerCategory($orderBy = 'id', $page = 1, $maxPerPage = 10, $id)
    {
        $q = $this->createQueryBuilder('a');
        $q->add('select', 'a');
        $q->where('a.product_category = :id');
        $q->andWhere('a.online = 1');
        $q->setParameter('id',$id);
        $q->addOrderBy('a.' . $orderBy, 'ASC');
        $q->setFirstResult(($page - 1) * $maxPerPage)
            ->setMaxResults($maxPerPage);
        return new Paginator($q);
    }

    public function pagerClassic($orderBy = 'position', $page = 1, $maxPerPage = 10)
    {
        $q = $this->createQueryBuilder('a');
        $q->add('select', 'a');
        $q->where('a.online = 1');
        $q->addOrderBy('a.' . $orderBy, 'ASC');
        $q->setFirstResult(($page - 1) * $maxPerPage)
            ->setMaxResults($maxPerPage);
        return new Paginator($q);
    }

    public function count()
    {
        return $this->createQueryBuilder('a')
            ->select('COUNT(a)')
            ->getQuery()
            ->getSingleScalarResult();
    }
}
